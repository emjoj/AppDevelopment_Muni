
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 */

export type User = {
  id: number
  firstName: string
  lastName: string
}

/**
 * Model Contact
 */

export type Contact = {
  id: number
  user1Id: number
  user2Id: number
  state: string
}

/**
 * Model Conversation
 */

export type Conversation = {
  id: number
  isActive: boolean
}

/**
 * Model Conversation_User
 */

export type Conversation_User = {
  id: number
  conversationId: number
  userId: number
}

/**
 * Model Message
 */

export type Message = {
  id: number
  senderId: number
  text: string | null
  createdAt: Date
  conversationId: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<GlobalReject>;

  /**
   * `prisma.conversation`: Exposes CRUD operations for the **Conversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversations
    * const conversations = await prisma.conversation.findMany()
    * ```
    */
  get conversation(): Prisma.ConversationDelegate<GlobalReject>;

  /**
   * `prisma.conversation_User`: Exposes CRUD operations for the **Conversation_User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conversation_Users
    * const conversation_Users = await prisma.conversation_User.findMany()
    * ```
    */
  get conversation_User(): Prisma.Conversation_UserDelegate<GlobalReject>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.22.1
   * Query Engine version: 60cc71d884972ab4e897f0277c4b84383dddaf6c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Contact: 'Contact',
    Conversation: 'Conversation',
    Conversation_User: 'Conversation_User',
    Message: 'Message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UserCountAggregateInputType | true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<Array<
    PickArray<UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UserGroupByOutputType))]: GetScalarType<T[P], UserGroupByOutputType[P]>
    }
  >>
    

  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    messages?: boolean | MessageFindManyArgs
    user1?: boolean | ContactFindManyArgs
    user2?: boolean | ContactFindManyArgs
    conversations?: boolean | Conversation_UserFindManyArgs
  }

  export type UserInclude = {
    messages?: boolean | MessageFindManyArgs
    user1?: boolean | ContactFindManyArgs
    user2?: boolean | ContactFindManyArgs
    conversations?: boolean | Conversation_UserFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'messages'
        ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'user1'
        ? Array < ContactGetPayload<S['include'][P]>>  :
        P extends 'user2'
        ? Array < ContactGetPayload<S['include'][P]>>  :
        P extends 'conversations'
        ? Array < Conversation_UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'messages'
        ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'user1'
        ? Array < ContactGetPayload<S['select'][P]>>  :
        P extends 'user2'
        ? Array < ContactGetPayload<S['select'][P]>>  :
        P extends 'conversations'
        ? Array < Conversation_UserGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    messages<T extends MessageFindManyArgs = {}>(args?: Subset<T, MessageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Message>>, PrismaPromise<Array<MessageGetPayload<T>>>>;

    user1<T extends ContactFindManyArgs = {}>(args?: Subset<T, ContactFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Contact>>, PrismaPromise<Array<ContactGetPayload<T>>>>;

    user2<T extends ContactFindManyArgs = {}>(args?: Subset<T, ContactFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Contact>>, PrismaPromise<Array<ContactGetPayload<T>>>>;

    conversations<T extends Conversation_UserFindManyArgs = {}>(args?: Subset<T, Conversation_UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Conversation_User>>, PrismaPromise<Array<Conversation_UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Contact
   */


  export type AggregateContact = {
    count: ContactCountAggregateOutputType | null
    avg: ContactAvgAggregateOutputType | null
    sum: ContactSumAggregateOutputType | null
    min: ContactMinAggregateOutputType | null
    max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    state: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    user1Id: number | null
    user2Id: number | null
    state: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    user1Id: number
    user2Id: number
    state: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    state?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    state?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    user1Id?: true
    user2Id?: true
    state?: true
    _all?: true
  }

  export type ContactAggregateArgs = {
    /**
     * Filter which Contact to aggregate.
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
    **/
    orderBy?: Enumerable<ContactOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
    [P in keyof T & keyof AggregateContact]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }


    
    
  export type ContactGroupByArgs = {
    where?: ContactWhereInput
    orderBy?: Enumerable<ContactOrderByInput>
    by: Array<ContactScalarFieldEnum>
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ContactCountAggregateInputType | true
    avg?: ContactAvgAggregateInputType
    sum?: ContactSumAggregateInputType
    min?: ContactMinAggregateInputType
    max?: ContactMaxAggregateInputType
  }


  export type ContactGroupByOutputType = {
    id: number
    user1Id: number
    user2Id: number
    state: string
    count: ContactCountAggregateOutputType | null
    avg: ContactAvgAggregateOutputType | null
    sum: ContactSumAggregateOutputType | null
    min: ContactMinAggregateOutputType | null
    max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Promise<Array<
    PickArray<ContactGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ContactGroupByOutputType))]: GetScalarType<T[P], ContactGroupByOutputType[P]>
    }
  >>
    

  export type ContactSelect = {
    id?: boolean
    user1?: boolean | UserArgs
    user1Id?: boolean
    user2?: boolean | UserArgs
    user2Id?: boolean
    state?: boolean
  }

  export type ContactInclude = {
    user1?: boolean | UserArgs
    user2?: boolean | UserArgs
  }

  export type ContactGetPayload<
    S extends boolean | null | undefined | ContactArgs,
    U = keyof S
      > = S extends true
        ? Contact
    : S extends undefined
    ? never
    : S extends ContactArgs | ContactFindManyArgs
    ?'include' extends U
    ? Contact  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user1'
        ? UserGetPayload<S['include'][P]> :
        P extends 'user2'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Contact ?Contact [P]
  : 
          P extends 'user1'
        ? UserGetPayload<S['select'][P]> :
        P extends 'user2'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Contact
  : Contact


  type ContactCountArgs = Merge<
    Omit<ContactFindManyArgs, 'select' | 'include'> & {
      select?: ContactCountAggregateInputType | true
    }
  >

  export interface ContactDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContactFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContactFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Contact'> extends True ? CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>> : CheckSelect<T, Prisma__ContactClient<Contact | null >, Prisma__ContactClient<ContactGetPayload<T> | null >>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContactFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContactFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Contact'> extends True ? CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>> : CheckSelect<T, Prisma__ContactClient<Contact | null >, Prisma__ContactClient<ContactGetPayload<T> | null >>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContactFindManyArgs>(
      args?: SelectSubset<T, ContactFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Contact>>, PrismaPromise<Array<ContactGetPayload<T>>>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
    **/
    create<T extends ContactCreateArgs>(
      args: SelectSubset<T, ContactCreateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Create many Contacts.
     *     @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     *     @example
     *     // Create many Contacts
     *     const contact = await prisma.contact.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContactCreateManyArgs>(
      args?: SelectSubset<T, ContactCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
    **/
    delete<T extends ContactDeleteArgs>(
      args: SelectSubset<T, ContactDeleteArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContactUpdateArgs>(
      args: SelectSubset<T, ContactUpdateArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContactDeleteManyArgs>(
      args?: SelectSubset<T, ContactDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContactUpdateManyArgs>(
      args: SelectSubset<T, ContactUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
    **/
    upsert<T extends ContactUpsertArgs>(
      args: SelectSubset<T, ContactUpsertArgs>
    ): CheckSelect<T, Prisma__ContactClient<Contact>, Prisma__ContactClient<ContactGetPayload<T>>>

    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContactClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user1<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    user2<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * Throw an Error if a Contact can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contact to fetch.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * Throw an Error if a Contact can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Contact to fetch.
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
    **/
    orderBy?: Enumerable<ContactOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
    **/
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact findMany
   */
  export type ContactFindManyArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * Filter, which Contacts to fetch.
    **/
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
    **/
    orderBy?: Enumerable<ContactOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
    **/
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
    **/
    skip?: number
    distinct?: Enumerable<ContactScalarFieldEnum>
  }


  /**
   * Contact create
   */
  export type ContactCreateArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * The data needed to create a Contact.
    **/
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }


  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs = {
    data: Enumerable<ContactCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Contact update
   */
  export type ContactUpdateArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * The data needed to update a Contact.
    **/
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs = {
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    where?: ContactWhereInput
  }


  /**
   * Contact upsert
   */
  export type ContactUpsertArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * The filter to search for the Contact to update in case it exists.
    **/
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
    **/
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }


  /**
   * Contact delete
   */
  export type ContactDeleteArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
    /**
     * Filter which Contact to delete.
    **/
    where: ContactWhereUniqueInput
  }


  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs = {
    where?: ContactWhereInput
  }


  /**
   * Contact without action
   */
  export type ContactArgs = {
    /**
     * Select specific fields to fetch from the Contact
    **/
    select?: ContactSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContactInclude | null
  }



  /**
   * Model Conversation
   */


  export type AggregateConversation = {
    count: ConversationCountAggregateOutputType | null
    avg: ConversationAvgAggregateOutputType | null
    sum: ConversationSumAggregateOutputType | null
    min: ConversationMinAggregateOutputType | null
    max: ConversationMaxAggregateOutputType | null
  }

  export type ConversationAvgAggregateOutputType = {
    id: number | null
  }

  export type ConversationSumAggregateOutputType = {
    id: number | null
  }

  export type ConversationMinAggregateOutputType = {
    id: number | null
    isActive: boolean | null
  }

  export type ConversationMaxAggregateOutputType = {
    id: number | null
    isActive: boolean | null
  }

  export type ConversationCountAggregateOutputType = {
    id: number
    isActive: number
    _all: number
  }


  export type ConversationAvgAggregateInputType = {
    id?: true
  }

  export type ConversationSumAggregateInputType = {
    id?: true
  }

  export type ConversationMinAggregateInputType = {
    id?: true
    isActive?: true
  }

  export type ConversationMaxAggregateInputType = {
    id?: true
    isActive?: true
  }

  export type ConversationCountAggregateInputType = {
    id?: true
    isActive?: true
    _all?: true
  }

  export type ConversationAggregateArgs = {
    /**
     * Filter which Conversation to aggregate.
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
    **/
    orderBy?: Enumerable<ConversationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversations
    **/
    count?: true | ConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ConversationMaxAggregateInputType
  }

  export type GetConversationAggregateType<T extends ConversationAggregateArgs> = {
    [P in keyof T & keyof AggregateConversation]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation[P]>
      : GetScalarType<T[P], AggregateConversation[P]>
  }


    
    
  export type ConversationGroupByArgs = {
    where?: ConversationWhereInput
    orderBy?: Enumerable<ConversationOrderByInput>
    by: Array<ConversationScalarFieldEnum>
    having?: ConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ConversationCountAggregateInputType | true
    avg?: ConversationAvgAggregateInputType
    sum?: ConversationSumAggregateInputType
    min?: ConversationMinAggregateInputType
    max?: ConversationMaxAggregateInputType
  }


  export type ConversationGroupByOutputType = {
    id: number
    isActive: boolean
    count: ConversationCountAggregateOutputType | null
    avg: ConversationAvgAggregateOutputType | null
    sum: ConversationSumAggregateOutputType | null
    min: ConversationMinAggregateOutputType | null
    max: ConversationMaxAggregateOutputType | null
  }

  type GetConversationGroupByPayload<T extends ConversationGroupByArgs> = Promise<Array<
    PickArray<ConversationGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ConversationGroupByOutputType))]: GetScalarType<T[P], ConversationGroupByOutputType[P]>
    }
  >>
    

  export type ConversationSelect = {
    id?: boolean
    isActive?: boolean
    users?: boolean | Conversation_UserFindManyArgs
    messages?: boolean | MessageFindManyArgs
  }

  export type ConversationInclude = {
    users?: boolean | Conversation_UserFindManyArgs
    messages?: boolean | MessageFindManyArgs
  }

  export type ConversationGetPayload<
    S extends boolean | null | undefined | ConversationArgs,
    U = keyof S
      > = S extends true
        ? Conversation
    : S extends undefined
    ? never
    : S extends ConversationArgs | ConversationFindManyArgs
    ?'include' extends U
    ? Conversation  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < Conversation_UserGetPayload<S['include'][P]>>  :
        P extends 'messages'
        ? Array < MessageGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Conversation ?Conversation [P]
  : 
          P extends 'users'
        ? Array < Conversation_UserGetPayload<S['select'][P]>>  :
        P extends 'messages'
        ? Array < MessageGetPayload<S['select'][P]>>  : never
  } 
    : Conversation
  : Conversation


  type ConversationCountArgs = Merge<
    Omit<ConversationFindManyArgs, 'select' | 'include'> & {
      select?: ConversationCountAggregateInputType | true
    }
  >

  export interface ConversationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Conversation that matches the filter.
     * @param {ConversationFindUniqueArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConversationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConversationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Conversation'> extends True ? CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>> : CheckSelect<T, Prisma__ConversationClient<Conversation | null >, Prisma__ConversationClient<ConversationGetPayload<T> | null >>

    /**
     * Find the first Conversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindFirstArgs} args - Arguments to find a Conversation
     * @example
     * // Get one Conversation
     * const conversation = await prisma.conversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConversationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConversationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Conversation'> extends True ? CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>> : CheckSelect<T, Prisma__ConversationClient<Conversation | null >, Prisma__ConversationClient<ConversationGetPayload<T> | null >>

    /**
     * Find zero or more Conversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversations
     * const conversations = await prisma.conversation.findMany()
     * 
     * // Get first 10 Conversations
     * const conversations = await prisma.conversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversationWithIdOnly = await prisma.conversation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConversationFindManyArgs>(
      args?: SelectSubset<T, ConversationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Conversation>>, PrismaPromise<Array<ConversationGetPayload<T>>>>

    /**
     * Create a Conversation.
     * @param {ConversationCreateArgs} args - Arguments to create a Conversation.
     * @example
     * // Create one Conversation
     * const Conversation = await prisma.conversation.create({
     *   data: {
     *     // ... data to create a Conversation
     *   }
     * })
     * 
    **/
    create<T extends ConversationCreateArgs>(
      args: SelectSubset<T, ConversationCreateArgs>
    ): CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>>

    /**
     * Create many Conversations.
     *     @param {ConversationCreateManyArgs} args - Arguments to create many Conversations.
     *     @example
     *     // Create many Conversations
     *     const conversation = await prisma.conversation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConversationCreateManyArgs>(
      args?: SelectSubset<T, ConversationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Conversation.
     * @param {ConversationDeleteArgs} args - Arguments to delete one Conversation.
     * @example
     * // Delete one Conversation
     * const Conversation = await prisma.conversation.delete({
     *   where: {
     *     // ... filter to delete one Conversation
     *   }
     * })
     * 
    **/
    delete<T extends ConversationDeleteArgs>(
      args: SelectSubset<T, ConversationDeleteArgs>
    ): CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>>

    /**
     * Update one Conversation.
     * @param {ConversationUpdateArgs} args - Arguments to update one Conversation.
     * @example
     * // Update one Conversation
     * const conversation = await prisma.conversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConversationUpdateArgs>(
      args: SelectSubset<T, ConversationUpdateArgs>
    ): CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>>

    /**
     * Delete zero or more Conversations.
     * @param {ConversationDeleteManyArgs} args - Arguments to filter Conversations to delete.
     * @example
     * // Delete a few Conversations
     * const { count } = await prisma.conversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConversationDeleteManyArgs>(
      args?: SelectSubset<T, ConversationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversations
     * const conversation = await prisma.conversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConversationUpdateManyArgs>(
      args: SelectSubset<T, ConversationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation.
     * @param {ConversationUpsertArgs} args - Arguments to update or create a Conversation.
     * @example
     * // Update or create a Conversation
     * const conversation = await prisma.conversation.upsert({
     *   create: {
     *     // ... data to create a Conversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation we want to update
     *   }
     * })
    **/
    upsert<T extends ConversationUpsertArgs>(
      args: SelectSubset<T, ConversationUpsertArgs>
    ): CheckSelect<T, Prisma__ConversationClient<Conversation>, Prisma__ConversationClient<ConversationGetPayload<T>>>

    /**
     * Count the number of Conversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationCountArgs} args - Arguments to filter Conversations to count.
     * @example
     * // Count the number of Conversations
     * const count = await prisma.conversation.count({
     *   where: {
     *     // ... the filter for the Conversations we want to count
     *   }
     * })
    **/
    count<T extends ConversationCountArgs>(
      args?: Subset<T, ConversationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConversationAggregateArgs>(args: Subset<T, ConversationAggregateArgs>): PrismaPromise<GetConversationAggregateType<T>>

    /**
     * Group by Conversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConversationGroupByArgs['orderBy'] }
        : { orderBy?: ConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversationGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConversationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends Conversation_UserFindManyArgs = {}>(args?: Subset<T, Conversation_UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Conversation_User>>, PrismaPromise<Array<Conversation_UserGetPayload<T>>>>;

    messages<T extends MessageFindManyArgs = {}>(args?: Subset<T, MessageFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Message>>, PrismaPromise<Array<MessageGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Conversation findUnique
   */
  export type ConversationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * Throw an Error if a Conversation can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Conversation to fetch.
    **/
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation findFirst
   */
  export type ConversationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * Throw an Error if a Conversation can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Conversation to fetch.
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
    **/
    orderBy?: Enumerable<ConversationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversations.
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversations.
    **/
    distinct?: Enumerable<ConversationScalarFieldEnum>
  }


  /**
   * Conversation findMany
   */
  export type ConversationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * Filter, which Conversations to fetch.
    **/
    where?: ConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversations to fetch.
    **/
    orderBy?: Enumerable<ConversationOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversations.
    **/
    cursor?: ConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversations from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversations.
    **/
    skip?: number
    distinct?: Enumerable<ConversationScalarFieldEnum>
  }


  /**
   * Conversation create
   */
  export type ConversationCreateArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * The data needed to create a Conversation.
    **/
    data: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
  }


  /**
   * Conversation createMany
   */
  export type ConversationCreateManyArgs = {
    data: Enumerable<ConversationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Conversation update
   */
  export type ConversationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * The data needed to update a Conversation.
    **/
    data: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
    /**
     * Choose, which Conversation to update.
    **/
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation updateMany
   */
  export type ConversationUpdateManyArgs = {
    data: XOR<ConversationUpdateManyMutationInput, ConversationUncheckedUpdateManyInput>
    where?: ConversationWhereInput
  }


  /**
   * Conversation upsert
   */
  export type ConversationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * The filter to search for the Conversation to update in case it exists.
    **/
    where: ConversationWhereUniqueInput
    /**
     * In case the Conversation found by the `where` argument doesn't exist, create a new Conversation with this data.
    **/
    create: XOR<ConversationCreateInput, ConversationUncheckedCreateInput>
    /**
     * In case the Conversation was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ConversationUpdateInput, ConversationUncheckedUpdateInput>
  }


  /**
   * Conversation delete
   */
  export type ConversationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
    /**
     * Filter which Conversation to delete.
    **/
    where: ConversationWhereUniqueInput
  }


  /**
   * Conversation deleteMany
   */
  export type ConversationDeleteManyArgs = {
    where?: ConversationWhereInput
  }


  /**
   * Conversation without action
   */
  export type ConversationArgs = {
    /**
     * Select specific fields to fetch from the Conversation
    **/
    select?: ConversationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConversationInclude | null
  }



  /**
   * Model Conversation_User
   */


  export type AggregateConversation_User = {
    count: Conversation_UserCountAggregateOutputType | null
    avg: Conversation_UserAvgAggregateOutputType | null
    sum: Conversation_UserSumAggregateOutputType | null
    min: Conversation_UserMinAggregateOutputType | null
    max: Conversation_UserMaxAggregateOutputType | null
  }

  export type Conversation_UserAvgAggregateOutputType = {
    id: number | null
    conversationId: number | null
    userId: number | null
  }

  export type Conversation_UserSumAggregateOutputType = {
    id: number | null
    conversationId: number | null
    userId: number | null
  }

  export type Conversation_UserMinAggregateOutputType = {
    id: number | null
    conversationId: number | null
    userId: number | null
  }

  export type Conversation_UserMaxAggregateOutputType = {
    id: number | null
    conversationId: number | null
    userId: number | null
  }

  export type Conversation_UserCountAggregateOutputType = {
    id: number
    conversationId: number
    userId: number
    _all: number
  }


  export type Conversation_UserAvgAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
  }

  export type Conversation_UserSumAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
  }

  export type Conversation_UserMinAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
  }

  export type Conversation_UserMaxAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
  }

  export type Conversation_UserCountAggregateInputType = {
    id?: true
    conversationId?: true
    userId?: true
    _all?: true
  }

  export type Conversation_UserAggregateArgs = {
    /**
     * Filter which Conversation_User to aggregate.
    **/
    where?: Conversation_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversation_Users to fetch.
    **/
    orderBy?: Enumerable<Conversation_UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: Conversation_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversation_Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversation_Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conversation_Users
    **/
    count?: true | Conversation_UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Conversation_UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Conversation_UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Conversation_UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Conversation_UserMaxAggregateInputType
  }

  export type GetConversation_UserAggregateType<T extends Conversation_UserAggregateArgs> = {
    [P in keyof T & keyof AggregateConversation_User]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConversation_User[P]>
      : GetScalarType<T[P], AggregateConversation_User[P]>
  }


    
    
  export type Conversation_UserGroupByArgs = {
    where?: Conversation_UserWhereInput
    orderBy?: Enumerable<Conversation_UserOrderByInput>
    by: Array<Conversation_UserScalarFieldEnum>
    having?: Conversation_UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: Conversation_UserCountAggregateInputType | true
    avg?: Conversation_UserAvgAggregateInputType
    sum?: Conversation_UserSumAggregateInputType
    min?: Conversation_UserMinAggregateInputType
    max?: Conversation_UserMaxAggregateInputType
  }


  export type Conversation_UserGroupByOutputType = {
    id: number
    conversationId: number
    userId: number
    count: Conversation_UserCountAggregateOutputType | null
    avg: Conversation_UserAvgAggregateOutputType | null
    sum: Conversation_UserSumAggregateOutputType | null
    min: Conversation_UserMinAggregateOutputType | null
    max: Conversation_UserMaxAggregateOutputType | null
  }

  type GetConversation_UserGroupByPayload<T extends Conversation_UserGroupByArgs> = Promise<Array<
    PickArray<Conversation_UserGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof Conversation_UserGroupByOutputType))]: GetScalarType<T[P], Conversation_UserGroupByOutputType[P]>
    }
  >>
    

  export type Conversation_UserSelect = {
    id?: boolean
    conversation?: boolean | ConversationArgs
    conversationId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }

  export type Conversation_UserInclude = {
    conversation?: boolean | ConversationArgs
    user?: boolean | UserArgs
  }

  export type Conversation_UserGetPayload<
    S extends boolean | null | undefined | Conversation_UserArgs,
    U = keyof S
      > = S extends true
        ? Conversation_User
    : S extends undefined
    ? never
    : S extends Conversation_UserArgs | Conversation_UserFindManyArgs
    ?'include' extends U
    ? Conversation_User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'conversation'
        ? ConversationGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Conversation_User ?Conversation_User [P]
  : 
          P extends 'conversation'
        ? ConversationGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Conversation_User
  : Conversation_User


  type Conversation_UserCountArgs = Merge<
    Omit<Conversation_UserFindManyArgs, 'select' | 'include'> & {
      select?: Conversation_UserCountAggregateInputType | true
    }
  >

  export interface Conversation_UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Conversation_User that matches the filter.
     * @param {Conversation_UserFindUniqueArgs} args - Arguments to find a Conversation_User
     * @example
     * // Get one Conversation_User
     * const conversation_User = await prisma.conversation_User.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Conversation_UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, Conversation_UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Conversation_User'> extends True ? CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>> : CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User | null >, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T> | null >>

    /**
     * Find the first Conversation_User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserFindFirstArgs} args - Arguments to find a Conversation_User
     * @example
     * // Get one Conversation_User
     * const conversation_User = await prisma.conversation_User.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Conversation_UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, Conversation_UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Conversation_User'> extends True ? CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>> : CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User | null >, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T> | null >>

    /**
     * Find zero or more Conversation_Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conversation_Users
     * const conversation_Users = await prisma.conversation_User.findMany()
     * 
     * // Get first 10 Conversation_Users
     * const conversation_Users = await prisma.conversation_User.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conversation_UserWithIdOnly = await prisma.conversation_User.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Conversation_UserFindManyArgs>(
      args?: SelectSubset<T, Conversation_UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Conversation_User>>, PrismaPromise<Array<Conversation_UserGetPayload<T>>>>

    /**
     * Create a Conversation_User.
     * @param {Conversation_UserCreateArgs} args - Arguments to create a Conversation_User.
     * @example
     * // Create one Conversation_User
     * const Conversation_User = await prisma.conversation_User.create({
     *   data: {
     *     // ... data to create a Conversation_User
     *   }
     * })
     * 
    **/
    create<T extends Conversation_UserCreateArgs>(
      args: SelectSubset<T, Conversation_UserCreateArgs>
    ): CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>>

    /**
     * Create many Conversation_Users.
     *     @param {Conversation_UserCreateManyArgs} args - Arguments to create many Conversation_Users.
     *     @example
     *     // Create many Conversation_Users
     *     const conversation_User = await prisma.conversation_User.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Conversation_UserCreateManyArgs>(
      args?: SelectSubset<T, Conversation_UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Conversation_User.
     * @param {Conversation_UserDeleteArgs} args - Arguments to delete one Conversation_User.
     * @example
     * // Delete one Conversation_User
     * const Conversation_User = await prisma.conversation_User.delete({
     *   where: {
     *     // ... filter to delete one Conversation_User
     *   }
     * })
     * 
    **/
    delete<T extends Conversation_UserDeleteArgs>(
      args: SelectSubset<T, Conversation_UserDeleteArgs>
    ): CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>>

    /**
     * Update one Conversation_User.
     * @param {Conversation_UserUpdateArgs} args - Arguments to update one Conversation_User.
     * @example
     * // Update one Conversation_User
     * const conversation_User = await prisma.conversation_User.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Conversation_UserUpdateArgs>(
      args: SelectSubset<T, Conversation_UserUpdateArgs>
    ): CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>>

    /**
     * Delete zero or more Conversation_Users.
     * @param {Conversation_UserDeleteManyArgs} args - Arguments to filter Conversation_Users to delete.
     * @example
     * // Delete a few Conversation_Users
     * const { count } = await prisma.conversation_User.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Conversation_UserDeleteManyArgs>(
      args?: SelectSubset<T, Conversation_UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conversation_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conversation_Users
     * const conversation_User = await prisma.conversation_User.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Conversation_UserUpdateManyArgs>(
      args: SelectSubset<T, Conversation_UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Conversation_User.
     * @param {Conversation_UserUpsertArgs} args - Arguments to update or create a Conversation_User.
     * @example
     * // Update or create a Conversation_User
     * const conversation_User = await prisma.conversation_User.upsert({
     *   create: {
     *     // ... data to create a Conversation_User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Conversation_User we want to update
     *   }
     * })
    **/
    upsert<T extends Conversation_UserUpsertArgs>(
      args: SelectSubset<T, Conversation_UserUpsertArgs>
    ): CheckSelect<T, Prisma__Conversation_UserClient<Conversation_User>, Prisma__Conversation_UserClient<Conversation_UserGetPayload<T>>>

    /**
     * Count the number of Conversation_Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserCountArgs} args - Arguments to filter Conversation_Users to count.
     * @example
     * // Count the number of Conversation_Users
     * const count = await prisma.conversation_User.count({
     *   where: {
     *     // ... the filter for the Conversation_Users we want to count
     *   }
     * })
    **/
    count<T extends Conversation_UserCountArgs>(
      args?: Subset<T, Conversation_UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Conversation_UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Conversation_User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Conversation_UserAggregateArgs>(args: Subset<T, Conversation_UserAggregateArgs>): PrismaPromise<GetConversation_UserAggregateType<T>>

    /**
     * Group by Conversation_User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Conversation_UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Conversation_UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Conversation_UserGroupByArgs['orderBy'] }
        : { orderBy?: Conversation_UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Conversation_UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConversation_UserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Conversation_User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Conversation_UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    conversation<T extends ConversationArgs = {}>(args?: Subset<T, ConversationArgs>): CheckSelect<T, Prisma__ConversationClient<Conversation | null >, Prisma__ConversationClient<ConversationGetPayload<T> | null >>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Conversation_User findUnique
   */
  export type Conversation_UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * Throw an Error if a Conversation_User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Conversation_User to fetch.
    **/
    where: Conversation_UserWhereUniqueInput
  }


  /**
   * Conversation_User findFirst
   */
  export type Conversation_UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * Throw an Error if a Conversation_User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Conversation_User to fetch.
    **/
    where?: Conversation_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversation_Users to fetch.
    **/
    orderBy?: Enumerable<Conversation_UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conversation_Users.
    **/
    cursor?: Conversation_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversation_Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversation_Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conversation_Users.
    **/
    distinct?: Enumerable<Conversation_UserScalarFieldEnum>
  }


  /**
   * Conversation_User findMany
   */
  export type Conversation_UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * Filter, which Conversation_Users to fetch.
    **/
    where?: Conversation_UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conversation_Users to fetch.
    **/
    orderBy?: Enumerable<Conversation_UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conversation_Users.
    **/
    cursor?: Conversation_UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conversation_Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conversation_Users.
    **/
    skip?: number
    distinct?: Enumerable<Conversation_UserScalarFieldEnum>
  }


  /**
   * Conversation_User create
   */
  export type Conversation_UserCreateArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * The data needed to create a Conversation_User.
    **/
    data: XOR<Conversation_UserCreateInput, Conversation_UserUncheckedCreateInput>
  }


  /**
   * Conversation_User createMany
   */
  export type Conversation_UserCreateManyArgs = {
    data: Enumerable<Conversation_UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Conversation_User update
   */
  export type Conversation_UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * The data needed to update a Conversation_User.
    **/
    data: XOR<Conversation_UserUpdateInput, Conversation_UserUncheckedUpdateInput>
    /**
     * Choose, which Conversation_User to update.
    **/
    where: Conversation_UserWhereUniqueInput
  }


  /**
   * Conversation_User updateMany
   */
  export type Conversation_UserUpdateManyArgs = {
    data: XOR<Conversation_UserUpdateManyMutationInput, Conversation_UserUncheckedUpdateManyInput>
    where?: Conversation_UserWhereInput
  }


  /**
   * Conversation_User upsert
   */
  export type Conversation_UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * The filter to search for the Conversation_User to update in case it exists.
    **/
    where: Conversation_UserWhereUniqueInput
    /**
     * In case the Conversation_User found by the `where` argument doesn't exist, create a new Conversation_User with this data.
    **/
    create: XOR<Conversation_UserCreateInput, Conversation_UserUncheckedCreateInput>
    /**
     * In case the Conversation_User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<Conversation_UserUpdateInput, Conversation_UserUncheckedUpdateInput>
  }


  /**
   * Conversation_User delete
   */
  export type Conversation_UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
    /**
     * Filter which Conversation_User to delete.
    **/
    where: Conversation_UserWhereUniqueInput
  }


  /**
   * Conversation_User deleteMany
   */
  export type Conversation_UserDeleteManyArgs = {
    where?: Conversation_UserWhereInput
  }


  /**
   * Conversation_User without action
   */
  export type Conversation_UserArgs = {
    /**
     * Select specific fields to fetch from the Conversation_User
    **/
    select?: Conversation_UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Conversation_UserInclude | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    count: MessageCountAggregateOutputType | null
    avg: MessageAvgAggregateOutputType | null
    sum: MessageSumAggregateOutputType | null
    min: MessageMinAggregateOutputType | null
    max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    senderId: number | null
    conversationId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    senderId: number | null
    conversationId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    senderId: number | null
    text: string | null
    createdAt: Date | null
    conversationId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    senderId: number | null
    text: string | null
    createdAt: Date | null
    conversationId: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    text: number
    createdAt: number
    conversationId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    senderId?: true
    conversationId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    senderId?: true
    conversationId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    text?: true
    createdAt?: true
    conversationId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    text?: true
    createdAt?: true
    conversationId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    text?: true
    createdAt?: true
    conversationId?: true
    _all?: true
  }

  export type MessageAggregateArgs = {
    /**
     * Filter which Message to aggregate.
    **/
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
    **/
    orderBy?: Enumerable<MessageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
    [P in keyof T & keyof AggregateMessage]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }


    
    
  export type MessageGroupByArgs = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByInput>
    by: Array<MessageScalarFieldEnum>
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: MessageCountAggregateInputType | true
    avg?: MessageAvgAggregateInputType
    sum?: MessageSumAggregateInputType
    min?: MessageMinAggregateInputType
    max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: number
    senderId: number
    text: string | null
    createdAt: Date
    conversationId: number | null
    count: MessageCountAggregateOutputType | null
    avg: MessageAvgAggregateOutputType | null
    sum: MessageSumAggregateOutputType | null
    min: MessageMinAggregateOutputType | null
    max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Promise<Array<
    PickArray<MessageGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof MessageGroupByOutputType))]: GetScalarType<T[P], MessageGroupByOutputType[P]>
    }
  >>
    

  export type MessageSelect = {
    id?: boolean
    senderId?: boolean
    sender?: boolean | UserArgs
    text?: boolean
    createdAt?: boolean
    conversationId?: boolean
    conversation?: boolean | ConversationArgs
  }

  export type MessageInclude = {
    sender?: boolean | UserArgs
    conversation?: boolean | ConversationArgs
  }

  export type MessageGetPayload<
    S extends boolean | null | undefined | MessageArgs,
    U = keyof S
      > = S extends true
        ? Message
    : S extends undefined
    ? never
    : S extends MessageArgs | MessageFindManyArgs
    ?'include' extends U
    ? Message  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sender'
        ? UserGetPayload<S['include'][P]> :
        P extends 'conversation'
        ? ConversationGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Message ?Message [P]
  : 
          P extends 'sender'
        ? UserGetPayload<S['select'][P]> :
        P extends 'conversation'
        ? ConversationGetPayload<S['select'][P]> | null : never
  } 
    : Message
  : Message


  type MessageCountArgs = Merge<
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }
  >

  export interface MessageDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>> : CheckSelect<T, Prisma__MessageClient<Message | null >, Prisma__MessageClient<MessageGetPayload<T> | null >>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>> : CheckSelect<T, Prisma__MessageClient<Message | null >, Prisma__MessageClient<MessageGetPayload<T> | null >>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs>(
      args?: SelectSubset<T, MessageFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Message>>, PrismaPromise<Array<MessageGetPayload<T>>>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs>(
      args: SelectSubset<T, MessageCreateArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs>(
      args?: SelectSubset<T, MessageCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs>(
      args: SelectSubset<T, MessageDeleteArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs>(
      args: SelectSubset<T, MessageUpdateArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs>(
      args?: SelectSubset<T, MessageDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs>(
      args: SelectSubset<T, MessageUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs>(
      args: SelectSubset<T, MessageUpsertArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sender<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    conversation<T extends ConversationArgs = {}>(args?: Subset<T, ConversationArgs>): CheckSelect<T, Prisma__ConversationClient<Conversation | null >, Prisma__ConversationClient<ConversationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Throw an Error if a Message can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Message to fetch.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Throw an Error if a Message can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Message to fetch.
    **/
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
    **/
    orderBy?: Enumerable<MessageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
    **/
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
    **/
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter, which Messages to fetch.
    **/
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
    **/
    orderBy?: Enumerable<MessageOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
    **/
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
    **/
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The data needed to create a Message.
    **/
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs = {
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The data needed to update a Message.
    **/
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs = {
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The filter to search for the Message to update in case it exists.
    **/
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
    **/
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter which Message to delete.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs = {
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    user1Id: 'user1Id',
    user2Id: 'user2Id',
    state: 'state'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const ConversationScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive'
  };

  export type ConversationScalarFieldEnum = (typeof ConversationScalarFieldEnum)[keyof typeof ConversationScalarFieldEnum]


  export const Conversation_UserScalarFieldEnum: {
    id: 'id',
    conversationId: 'conversationId',
    userId: 'userId'
  };

  export type Conversation_UserScalarFieldEnum = (typeof Conversation_UserScalarFieldEnum)[keyof typeof Conversation_UserScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    text: 'text',
    createdAt: 'createdAt',
    conversationId: 'conversationId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    messages?: MessageListRelationFilter
    user1?: ContactListRelationFilter
    user2?: ContactListRelationFilter
    conversations?: Conversation_UserListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
  }

  export type ContactWhereInput = {
    AND?: Enumerable<ContactWhereInput>
    OR?: Enumerable<ContactWhereInput>
    NOT?: Enumerable<ContactWhereInput>
    id?: IntFilter | number
    user1?: XOR<UserRelationFilter, UserWhereInput>
    user1Id?: IntFilter | number
    user2?: XOR<UserRelationFilter, UserWhereInput>
    user2Id?: IntFilter | number
    state?: StringFilter | string
  }

  export type ContactOrderByInput = {
    id?: SortOrder
    user1Id?: SortOrder
    user2Id?: SortOrder
    state?: SortOrder
  }

  export type ContactWhereUniqueInput = {
    id?: number
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContactScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContactScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContactScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user1Id?: IntWithAggregatesFilter | number
    user2Id?: IntWithAggregatesFilter | number
    state?: StringWithAggregatesFilter | string
  }

  export type ConversationWhereInput = {
    AND?: Enumerable<ConversationWhereInput>
    OR?: Enumerable<ConversationWhereInput>
    NOT?: Enumerable<ConversationWhereInput>
    id?: IntFilter | number
    isActive?: BoolFilter | boolean
    users?: Conversation_UserListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type ConversationOrderByInput = {
    id?: SortOrder
    isActive?: SortOrder
  }

  export type ConversationWhereUniqueInput = {
    id?: number
  }

  export type ConversationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConversationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    isActive?: BoolWithAggregatesFilter | boolean
  }

  export type Conversation_UserWhereInput = {
    AND?: Enumerable<Conversation_UserWhereInput>
    OR?: Enumerable<Conversation_UserWhereInput>
    NOT?: Enumerable<Conversation_UserWhereInput>
    id?: IntFilter | number
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput>
    conversationId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
  }

  export type Conversation_UserOrderByInput = {
    id?: SortOrder
    conversationId?: SortOrder
    userId?: SortOrder
  }

  export type Conversation_UserWhereUniqueInput = {
    id?: number
  }

  export type Conversation_UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<Conversation_UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<Conversation_UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<Conversation_UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    conversationId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: IntFilter | number
    senderId?: IntFilter | number
    sender?: XOR<UserRelationFilter, UserWhereInput>
    text?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    conversationId?: IntNullableFilter | number | null
    conversation?: XOR<ConversationRelationFilter, ConversationWhereInput> | null
  }

  export type MessageOrderByInput = {
    id?: SortOrder
    senderId?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    conversationId?: SortOrder
  }

  export type MessageWhereUniqueInput = {
    id?: number
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    senderId?: IntWithAggregatesFilter | number
    text?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    conversationId?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    messages?: MessageCreateNestedManyWithoutSenderInput
    user1?: ContactCreateNestedManyWithoutUser1Input
    user2?: ContactCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    user1?: ContactUncheckedCreateNestedManyWithoutUser1Input
    user2?: ContactUncheckedCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutSenderInput
    user1?: ContactUpdateManyWithoutUser1Input
    user2?: ContactUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutSenderInput
    user1?: ContactUncheckedUpdateManyWithoutUser1Input
    user2?: ContactUncheckedUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateInput = {
    state: string
    user1: UserCreateNestedOneWithoutUser1Input
    user2: UserCreateNestedOneWithoutUser2Input
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    user1Id: number
    user2Id: number
    state: string
  }

  export type ContactUpdateInput = {
    state?: StringFieldUpdateOperationsInput | string
    user1?: UserUpdateOneRequiredWithoutUser1Input
    user2?: UserUpdateOneRequiredWithoutUser2Input
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateManyInput = {
    id?: number
    user1Id: number
    user2Id: number
    state: string
  }

  export type ContactUpdateManyMutationInput = {
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ConversationCreateInput = {
    isActive?: boolean
    users?: Conversation_UserCreateNestedManyWithoutConversationInput
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateInput = {
    id?: number
    isActive?: boolean
    users?: Conversation_UserUncheckedCreateNestedManyWithoutConversationInput
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationUpdateInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: Conversation_UserUpdateManyWithoutConversationInput
    messages?: MessageUpdateManyWithoutConversationInput
  }

  export type ConversationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: Conversation_UserUncheckedUpdateManyWithoutConversationInput
    messages?: MessageUncheckedUpdateManyWithoutConversationInput
  }

  export type ConversationCreateManyInput = {
    id?: number
    isActive?: boolean
  }

  export type ConversationUpdateManyMutationInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConversationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Conversation_UserCreateInput = {
    conversation: ConversationCreateNestedOneWithoutUsersInput
    user: UserCreateNestedOneWithoutConversationsInput
  }

  export type Conversation_UserUncheckedCreateInput = {
    id?: number
    conversationId: number
    userId: number
  }

  export type Conversation_UserUpdateInput = {
    conversation?: ConversationUpdateOneRequiredWithoutUsersInput
    user?: UserUpdateOneRequiredWithoutConversationsInput
  }

  export type Conversation_UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type Conversation_UserCreateManyInput = {
    id?: number
    conversationId: number
    userId: number
  }

  export type Conversation_UserUpdateManyMutationInput = {

  }

  export type Conversation_UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateInput = {
    text?: string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesInput
    conversation?: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    senderId: number
    text?: string | null
    createdAt?: Date | string
    conversationId?: number | null
  }

  export type MessageUpdateInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesInput
    conversation?: ConversationUpdateOneWithoutMessagesInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageCreateManyInput = {
    id?: number
    senderId: number
    text?: string | null
    createdAt?: Date | string
    conversationId?: number | null
  }

  export type MessageUpdateManyMutationInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type Conversation_UserListRelationFilter = {
    every?: Conversation_UserWhereInput
    some?: Conversation_UserWhereInput
    none?: Conversation_UserWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    count?: NestedIntFilter
    min?: NestedBoolFilter
    max?: NestedBoolFilter
  }

  export type ConversationRelationFilter = {
    is?: ConversationWhereInput
    isNot?: ConversationWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ContactCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser1Input>, Enumerable<ContactUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser1Input>
    createMany?: ContactCreateManyUser1InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type ContactCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser2Input>, Enumerable<ContactUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser2Input>
    createMany?: ContactCreateManyUser2InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type Conversation_UserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutUserInput>, Enumerable<Conversation_UserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutUserInput>
    createMany?: Conversation_UserCreateManyUserInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type ContactUncheckedCreateNestedManyWithoutUser1Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser1Input>, Enumerable<ContactUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser1Input>
    createMany?: ContactCreateManyUser1InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type ContactUncheckedCreateNestedManyWithoutUser2Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser2Input>, Enumerable<ContactUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser2Input>
    createMany?: ContactCreateManyUser2InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
  }

  export type Conversation_UserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutUserInput>, Enumerable<Conversation_UserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutUserInput>
    createMany?: Conversation_UserCreateManyUserInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type MessageUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ContactUpdateManyWithoutUser1Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser1Input>, Enumerable<ContactUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: ContactCreateManyUser1InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type ContactUpdateManyWithoutUser2Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser2Input>, Enumerable<ContactUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: ContactCreateManyUser2InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type Conversation_UserUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutUserInput>, Enumerable<Conversation_UserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Conversation_UserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Conversation_UserCreateManyUserInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
    set?: Enumerable<Conversation_UserWhereUniqueInput>
    disconnect?: Enumerable<Conversation_UserWhereUniqueInput>
    delete?: Enumerable<Conversation_UserWhereUniqueInput>
    update?: Enumerable<Conversation_UserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Conversation_UserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Conversation_UserScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ContactUncheckedUpdateManyWithoutUser1Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser1Input>, Enumerable<ContactUncheckedCreateWithoutUser1Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser1Input>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutUser1Input>
    createMany?: ContactCreateManyUser1InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutUser1Input>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutUser1Input>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type ContactUncheckedUpdateManyWithoutUser2Input = {
    create?: XOR<Enumerable<ContactCreateWithoutUser2Input>, Enumerable<ContactUncheckedCreateWithoutUser2Input>>
    connectOrCreate?: Enumerable<ContactCreateOrConnectWithoutUser2Input>
    upsert?: Enumerable<ContactUpsertWithWhereUniqueWithoutUser2Input>
    createMany?: ContactCreateManyUser2InputEnvelope
    connect?: Enumerable<ContactWhereUniqueInput>
    set?: Enumerable<ContactWhereUniqueInput>
    disconnect?: Enumerable<ContactWhereUniqueInput>
    delete?: Enumerable<ContactWhereUniqueInput>
    update?: Enumerable<ContactUpdateWithWhereUniqueWithoutUser2Input>
    updateMany?: Enumerable<ContactUpdateManyWithWhereWithoutUser2Input>
    deleteMany?: Enumerable<ContactScalarWhereInput>
  }

  export type Conversation_UserUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutUserInput>, Enumerable<Conversation_UserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<Conversation_UserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: Conversation_UserCreateManyUserInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
    set?: Enumerable<Conversation_UserWhereUniqueInput>
    disconnect?: Enumerable<Conversation_UserWhereUniqueInput>
    delete?: Enumerable<Conversation_UserWhereUniqueInput>
    update?: Enumerable<Conversation_UserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<Conversation_UserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<Conversation_UserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUser1Input = {
    create?: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUser2Input = {
    create?: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser2Input
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUser1Input = {
    create?: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser1Input
    upsert?: UserUpsertWithoutUser1Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUser1Input, UserUncheckedUpdateWithoutUser1Input>
  }

  export type UserUpdateOneRequiredWithoutUser2Input = {
    create?: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
    connectOrCreate?: UserCreateOrConnectWithoutUser2Input
    upsert?: UserUpsertWithoutUser2Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUser2Input, UserUncheckedUpdateWithoutUser2Input>
  }

  export type Conversation_UserCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutConversationInput>, Enumerable<Conversation_UserUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutConversationInput>
    createMany?: Conversation_UserCreateManyConversationInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<MessageCreateWithoutConversationInput>, Enumerable<MessageUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutConversationInput>
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type Conversation_UserUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutConversationInput>, Enumerable<Conversation_UserUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutConversationInput>
    createMany?: Conversation_UserCreateManyConversationInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<Enumerable<MessageCreateWithoutConversationInput>, Enumerable<MessageUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutConversationInput>
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type Conversation_UserUpdateManyWithoutConversationInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutConversationInput>, Enumerable<Conversation_UserUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<Conversation_UserUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: Conversation_UserCreateManyConversationInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
    set?: Enumerable<Conversation_UserWhereUniqueInput>
    disconnect?: Enumerable<Conversation_UserWhereUniqueInput>
    delete?: Enumerable<Conversation_UserWhereUniqueInput>
    update?: Enumerable<Conversation_UserUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<Conversation_UserUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<Conversation_UserScalarWhereInput>
  }

  export type MessageUpdateManyWithoutConversationInput = {
    create?: XOR<Enumerable<MessageCreateWithoutConversationInput>, Enumerable<MessageUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type Conversation_UserUncheckedUpdateManyWithoutConversationInput = {
    create?: XOR<Enumerable<Conversation_UserCreateWithoutConversationInput>, Enumerable<Conversation_UserUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<Conversation_UserCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<Conversation_UserUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: Conversation_UserCreateManyConversationInputEnvelope
    connect?: Enumerable<Conversation_UserWhereUniqueInput>
    set?: Enumerable<Conversation_UserWhereUniqueInput>
    disconnect?: Enumerable<Conversation_UserWhereUniqueInput>
    delete?: Enumerable<Conversation_UserWhereUniqueInput>
    update?: Enumerable<Conversation_UserUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<Conversation_UserUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<Conversation_UserScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutConversationInput = {
    create?: XOR<Enumerable<MessageCreateWithoutConversationInput>, Enumerable<MessageUncheckedCreateWithoutConversationInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutConversationInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutConversationInput>
    createMany?: MessageCreateManyConversationInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutConversationInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutConversationInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type ConversationCreateNestedOneWithoutUsersInput = {
    create?: XOR<ConversationCreateWithoutUsersInput, ConversationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutUsersInput
    connect?: ConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConversationsInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationUpdateOneRequiredWithoutUsersInput = {
    create?: XOR<ConversationCreateWithoutUsersInput, ConversationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutUsersInput
    upsert?: ConversationUpsertWithoutUsersInput
    connect?: ConversationWhereUniqueInput
    update?: XOR<ConversationUpdateWithoutUsersInput, ConversationUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneRequiredWithoutConversationsInput = {
    create?: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConversationsInput
    upsert?: UserUpsertWithoutConversationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ConversationUpdateOneWithoutMessagesInput = {
    create?: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ConversationCreateOrConnectWithoutMessagesInput
    upsert?: ConversationUpsertWithoutMessagesInput
    connect?: ConversationWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    count?: NestedIntFilter
    min?: NestedBoolFilter
    max?: NestedBoolFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    count?: NestedIntNullableFilter
    min?: NestedStringNullableFilter
    max?: NestedStringNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    count?: NestedIntNullableFilter
    avg?: NestedFloatNullableFilter
    sum?: NestedIntNullableFilter
    min?: NestedIntNullableFilter
    max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type MessageCreateWithoutSenderInput = {
    text?: string | null
    createdAt?: Date | string
    conversation?: ConversationCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    text?: string | null
    createdAt?: Date | string
    conversationId?: number | null
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: Enumerable<MessageCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutUser1Input = {
    state: string
    user2: UserCreateNestedOneWithoutUser2Input
  }

  export type ContactUncheckedCreateWithoutUser1Input = {
    id?: number
    user2Id: number
    state: string
  }

  export type ContactCreateOrConnectWithoutUser1Input = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUser1Input, ContactUncheckedCreateWithoutUser1Input>
  }

  export type ContactCreateManyUser1InputEnvelope = {
    data: Enumerable<ContactCreateManyUser1Input>
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutUser2Input = {
    state: string
    user1: UserCreateNestedOneWithoutUser1Input
  }

  export type ContactUncheckedCreateWithoutUser2Input = {
    id?: number
    user1Id: number
    state: string
  }

  export type ContactCreateOrConnectWithoutUser2Input = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutUser2Input, ContactUncheckedCreateWithoutUser2Input>
  }

  export type ContactCreateManyUser2InputEnvelope = {
    data: Enumerable<ContactCreateManyUser2Input>
    skipDuplicates?: boolean
  }

  export type Conversation_UserCreateWithoutUserInput = {
    conversation: ConversationCreateNestedOneWithoutUsersInput
  }

  export type Conversation_UserUncheckedCreateWithoutUserInput = {
    id?: number
    conversationId: number
  }

  export type Conversation_UserCreateOrConnectWithoutUserInput = {
    where: Conversation_UserWhereUniqueInput
    create: XOR<Conversation_UserCreateWithoutUserInput, Conversation_UserUncheckedCreateWithoutUserInput>
  }

  export type Conversation_UserCreateManyUserInputEnvelope = {
    data: Enumerable<Conversation_UserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: IntFilter | number
    senderId?: IntFilter | number
    text?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    conversationId?: IntNullableFilter | number | null
  }

  export type ContactUpsertWithWhereUniqueWithoutUser1Input = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutUser1Input, ContactUncheckedUpdateWithoutUser1Input>
    create: XOR<ContactCreateWithoutUser1Input, ContactUncheckedCreateWithoutUser1Input>
  }

  export type ContactUpdateWithWhereUniqueWithoutUser1Input = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutUser1Input, ContactUncheckedUpdateWithoutUser1Input>
  }

  export type ContactUpdateManyWithWhereWithoutUser1Input = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutUser1Input>
  }

  export type ContactScalarWhereInput = {
    AND?: Enumerable<ContactScalarWhereInput>
    OR?: Enumerable<ContactScalarWhereInput>
    NOT?: Enumerable<ContactScalarWhereInput>
    id?: IntFilter | number
    user1Id?: IntFilter | number
    user2Id?: IntFilter | number
    state?: StringFilter | string
  }

  export type ContactUpsertWithWhereUniqueWithoutUser2Input = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutUser2Input, ContactUncheckedUpdateWithoutUser2Input>
    create: XOR<ContactCreateWithoutUser2Input, ContactUncheckedCreateWithoutUser2Input>
  }

  export type ContactUpdateWithWhereUniqueWithoutUser2Input = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutUser2Input, ContactUncheckedUpdateWithoutUser2Input>
  }

  export type ContactUpdateManyWithWhereWithoutUser2Input = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutUser2Input>
  }

  export type Conversation_UserUpsertWithWhereUniqueWithoutUserInput = {
    where: Conversation_UserWhereUniqueInput
    update: XOR<Conversation_UserUpdateWithoutUserInput, Conversation_UserUncheckedUpdateWithoutUserInput>
    create: XOR<Conversation_UserCreateWithoutUserInput, Conversation_UserUncheckedCreateWithoutUserInput>
  }

  export type Conversation_UserUpdateWithWhereUniqueWithoutUserInput = {
    where: Conversation_UserWhereUniqueInput
    data: XOR<Conversation_UserUpdateWithoutUserInput, Conversation_UserUncheckedUpdateWithoutUserInput>
  }

  export type Conversation_UserUpdateManyWithWhereWithoutUserInput = {
    where: Conversation_UserScalarWhereInput
    data: XOR<Conversation_UserUpdateManyMutationInput, Conversation_UserUncheckedUpdateManyWithoutConversationsInput>
  }

  export type Conversation_UserScalarWhereInput = {
    AND?: Enumerable<Conversation_UserScalarWhereInput>
    OR?: Enumerable<Conversation_UserScalarWhereInput>
    NOT?: Enumerable<Conversation_UserScalarWhereInput>
    id?: IntFilter | number
    conversationId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type UserCreateWithoutUser1Input = {
    firstName: string
    lastName: string
    messages?: MessageCreateNestedManyWithoutSenderInput
    user2?: ContactCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser1Input = {
    id?: number
    firstName: string
    lastName: string
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    user2?: ContactUncheckedCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
  }

  export type UserCreateWithoutUser2Input = {
    firstName: string
    lastName: string
    messages?: MessageCreateNestedManyWithoutSenderInput
    user1?: ContactCreateNestedManyWithoutUser1Input
    conversations?: Conversation_UserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser2Input = {
    id?: number
    firstName: string
    lastName: string
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    user1?: ContactUncheckedCreateNestedManyWithoutUser1Input
    conversations?: Conversation_UserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
  }

  export type UserUpsertWithoutUser1Input = {
    update: XOR<UserUpdateWithoutUser1Input, UserUncheckedUpdateWithoutUser1Input>
    create: XOR<UserCreateWithoutUser1Input, UserUncheckedCreateWithoutUser1Input>
  }

  export type UserUpdateWithoutUser1Input = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutSenderInput
    user2?: ContactUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutSenderInput
    user2?: ContactUncheckedUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpsertWithoutUser2Input = {
    update: XOR<UserUpdateWithoutUser2Input, UserUncheckedUpdateWithoutUser2Input>
    create: XOR<UserCreateWithoutUser2Input, UserUncheckedCreateWithoutUser2Input>
  }

  export type UserUpdateWithoutUser2Input = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutSenderInput
    user1?: ContactUpdateManyWithoutUser1Input
    conversations?: Conversation_UserUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutSenderInput
    user1?: ContactUncheckedUpdateManyWithoutUser1Input
    conversations?: Conversation_UserUncheckedUpdateManyWithoutUserInput
  }

  export type Conversation_UserCreateWithoutConversationInput = {
    user: UserCreateNestedOneWithoutConversationsInput
  }

  export type Conversation_UserUncheckedCreateWithoutConversationInput = {
    id?: number
    userId: number
  }

  export type Conversation_UserCreateOrConnectWithoutConversationInput = {
    where: Conversation_UserWhereUniqueInput
    create: XOR<Conversation_UserCreateWithoutConversationInput, Conversation_UserUncheckedCreateWithoutConversationInput>
  }

  export type Conversation_UserCreateManyConversationInputEnvelope = {
    data: Enumerable<Conversation_UserCreateManyConversationInput>
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutConversationInput = {
    text?: string | null
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutConversationInput = {
    id?: number
    senderId: number
    text?: string | null
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutConversationInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageCreateManyConversationInputEnvelope = {
    data: Enumerable<MessageCreateManyConversationInput>
    skipDuplicates?: boolean
  }

  export type Conversation_UserUpsertWithWhereUniqueWithoutConversationInput = {
    where: Conversation_UserWhereUniqueInput
    update: XOR<Conversation_UserUpdateWithoutConversationInput, Conversation_UserUncheckedUpdateWithoutConversationInput>
    create: XOR<Conversation_UserCreateWithoutConversationInput, Conversation_UserUncheckedCreateWithoutConversationInput>
  }

  export type Conversation_UserUpdateWithWhereUniqueWithoutConversationInput = {
    where: Conversation_UserWhereUniqueInput
    data: XOR<Conversation_UserUpdateWithoutConversationInput, Conversation_UserUncheckedUpdateWithoutConversationInput>
  }

  export type Conversation_UserUpdateManyWithWhereWithoutConversationInput = {
    where: Conversation_UserScalarWhereInput
    data: XOR<Conversation_UserUpdateManyMutationInput, Conversation_UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type MessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
    create: XOR<MessageCreateWithoutConversationInput, MessageUncheckedCreateWithoutConversationInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutConversationInput, MessageUncheckedUpdateWithoutConversationInput>
  }

  export type MessageUpdateManyWithWhereWithoutConversationInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type ConversationCreateWithoutUsersInput = {
    isActive?: boolean
    messages?: MessageCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutUsersInput = {
    id?: number
    isActive?: boolean
    messages?: MessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutUsersInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutUsersInput, ConversationUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutConversationsInput = {
    firstName: string
    lastName: string
    messages?: MessageCreateNestedManyWithoutSenderInput
    user1?: ContactCreateNestedManyWithoutUser1Input
    user2?: ContactCreateNestedManyWithoutUser2Input
  }

  export type UserUncheckedCreateWithoutConversationsInput = {
    id?: number
    firstName: string
    lastName: string
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    user1?: ContactUncheckedCreateNestedManyWithoutUser1Input
    user2?: ContactUncheckedCreateNestedManyWithoutUser2Input
  }

  export type UserCreateOrConnectWithoutConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
  }

  export type ConversationUpsertWithoutUsersInput = {
    update: XOR<ConversationUpdateWithoutUsersInput, ConversationUncheckedUpdateWithoutUsersInput>
    create: XOR<ConversationCreateWithoutUsersInput, ConversationUncheckedCreateWithoutUsersInput>
  }

  export type ConversationUpdateWithoutUsersInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUpdateManyWithoutConversationInput
  }

  export type ConversationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    messages?: MessageUncheckedUpdateManyWithoutConversationInput
  }

  export type UserUpsertWithoutConversationsInput = {
    update: XOR<UserUpdateWithoutConversationsInput, UserUncheckedUpdateWithoutConversationsInput>
    create: XOR<UserCreateWithoutConversationsInput, UserUncheckedCreateWithoutConversationsInput>
  }

  export type UserUpdateWithoutConversationsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUpdateManyWithoutSenderInput
    user1?: ContactUpdateManyWithoutUser1Input
    user2?: ContactUpdateManyWithoutUser2Input
  }

  export type UserUncheckedUpdateWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    messages?: MessageUncheckedUpdateManyWithoutSenderInput
    user1?: ContactUncheckedUpdateManyWithoutUser1Input
    user2?: ContactUncheckedUpdateManyWithoutUser2Input
  }

  export type UserCreateWithoutMessagesInput = {
    firstName: string
    lastName: string
    user1?: ContactCreateNestedManyWithoutUser1Input
    user2?: ContactCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    firstName: string
    lastName: string
    user1?: ContactUncheckedCreateNestedManyWithoutUser1Input
    user2?: ContactUncheckedCreateNestedManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ConversationCreateWithoutMessagesInput = {
    isActive?: boolean
    users?: Conversation_UserCreateNestedManyWithoutConversationInput
  }

  export type ConversationUncheckedCreateWithoutMessagesInput = {
    id?: number
    isActive?: boolean
    users?: Conversation_UserUncheckedCreateNestedManyWithoutConversationInput
  }

  export type ConversationCreateOrConnectWithoutMessagesInput = {
    where: ConversationWhereUniqueInput
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    user1?: ContactUpdateManyWithoutUser1Input
    user2?: ContactUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    user1?: ContactUncheckedUpdateManyWithoutUser1Input
    user2?: ContactUncheckedUpdateManyWithoutUser2Input
    conversations?: Conversation_UserUncheckedUpdateManyWithoutUserInput
  }

  export type ConversationUpsertWithoutMessagesInput = {
    update: XOR<ConversationUpdateWithoutMessagesInput, ConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ConversationCreateWithoutMessagesInput, ConversationUncheckedCreateWithoutMessagesInput>
  }

  export type ConversationUpdateWithoutMessagesInput = {
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: Conversation_UserUpdateManyWithoutConversationInput
  }

  export type ConversationUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    users?: Conversation_UserUncheckedUpdateManyWithoutConversationInput
  }

  export type MessageCreateManySenderInput = {
    id?: number
    text?: string | null
    createdAt?: Date | string
    conversationId?: number | null
  }

  export type ContactCreateManyUser1Input = {
    id?: number
    user2Id: number
    state: string
  }

  export type ContactCreateManyUser2Input = {
    id?: number
    user1Id: number
    state: string
  }

  export type Conversation_UserCreateManyUserInput = {
    id?: number
    conversationId: number
  }

  export type MessageUpdateWithoutSenderInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversation?: ConversationUpdateOneWithoutMessagesInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ContactUpdateWithoutUser1Input = {
    state?: StringFieldUpdateOperationsInput | string
    user2?: UserUpdateOneRequiredWithoutUser2Input
  }

  export type ContactUncheckedUpdateWithoutUser1Input = {
    id?: IntFieldUpdateOperationsInput | number
    user2Id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUpdateWithoutUser2Input = {
    state?: StringFieldUpdateOperationsInput | string
    user1?: UserUpdateOneRequiredWithoutUser1Input
  }

  export type ContactUncheckedUpdateWithoutUser2Input = {
    id?: IntFieldUpdateOperationsInput | number
    user1Id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
  }

  export type Conversation_UserUpdateWithoutUserInput = {
    conversation?: ConversationUpdateOneRequiredWithoutUsersInput
  }

  export type Conversation_UserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: IntFieldUpdateOperationsInput | number
  }

  export type Conversation_UserUncheckedUpdateManyWithoutConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    conversationId?: IntFieldUpdateOperationsInput | number
  }

  export type Conversation_UserCreateManyConversationInput = {
    id?: number
    userId: number
  }

  export type MessageCreateManyConversationInput = {
    id?: number
    senderId: number
    text?: string | null
    createdAt?: Date | string
  }

  export type Conversation_UserUpdateWithoutConversationInput = {
    user?: UserUpdateOneRequiredWithoutConversationsInput
  }

  export type Conversation_UserUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type Conversation_UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUpdateWithoutConversationInput = {
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutMessagesInput
  }

  export type MessageUncheckedUpdateWithoutConversationInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: IntFieldUpdateOperationsInput | number
    text?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}